// automatically generated by the FlatBuffers compiler, do not modify

package edu.vanderbilt.edgent.types;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class ImageFrame extends Table {
  public static ImageFrame getRootAsImageFrame(ByteBuffer _bb) { return getRootAsImageFrame(_bb, new ImageFrame()); }
  public static ImageFrame getRootAsImageFrame(ByteBuffer _bb, ImageFrame obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; }
  public ImageFrame __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int sampleId() { int o = __offset(4); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public byte frame(int j) { int o = __offset(6); return o != 0 ? bb.get(__vector(o) + j * 1) : 0; }
  public int frameLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }
  public ByteBuffer frameAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }

  public static int createImageFrame(FlatBufferBuilder builder,
      int sampleId,
      int frameOffset) {
    builder.startObject(2);
    ImageFrame.addFrame(builder, frameOffset);
    ImageFrame.addSampleId(builder, sampleId);
    return ImageFrame.endImageFrame(builder);
  }

  public static void startImageFrame(FlatBufferBuilder builder) { builder.startObject(2); }
  public static void addSampleId(FlatBufferBuilder builder, int sampleId) { builder.addInt(0, sampleId, 0); }
  public static void addFrame(FlatBufferBuilder builder, int frameOffset) { builder.addOffset(1, frameOffset, 0); }
  public static int createFrameVector(FlatBufferBuilder builder, byte[] data) { builder.startVector(1, data.length, 1); for (int i = data.length - 1; i >= 0; i--) builder.addByte(data[i]); return builder.endVector(); }
  public static void startFrameVector(FlatBufferBuilder builder, int numElems) { builder.startVector(1, numElems, 1); }
  public static int endImageFrame(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
  public static void finishImageFrameBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset); }
}

